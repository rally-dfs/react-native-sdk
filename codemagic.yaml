definitions:
  default_environments: &default_environments
    node: 16.14.2
    npm: latest
  scripts:
    # would be great to be able to alias all these into one single reference but couldn't figure out a way to do that
    - &yarn_install
      name: Yarn install
      script: yarn install
    - &run_linter
      name: Run linter
      script: yarn lint
    - &compile_typescript
      name: Run typescript compiler
      script: yarn typescript
    - &yarn_test
      name: Yarn test
      script: yarn test
    - &yarn_test_full_suite
      name: Yarn test full suite
      script: CI_FULL_SUITE=1 yarn test

workflows:
  pre-build:
    name: Pre build
    max_build_duration: 60
    environment:
      <<: *default_environments
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: '*'
          include: true
          source: true
      cancel_previous_builds: false
    scripts:
      - *yarn_install
      - *run_linter
      - *compile_typescript
      - *yarn_test # this happens on every push, so don't need to run full suite here
    publishing:
      slack:
        channel: '#ci-builds'
  publish-npm:
    name: Publish tag to NPM
    max_build_duration: 300
    environment:
      <<: *default_environments
      groups:
        - publish-npm-group
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
    scripts:
      - name: Abort if not on main
        script: if [ `git rev-parse --abbrev-ref HEAD` != main ]; then exit 1; fi
      - *yarn_install
      - *run_linter
      - *compile_typescript
      - *yarn_test_full_suite # make sure to run full suite test for publish workflow
      - name: Clean and prepare
        script: yarn clean && yarn prepare
      - name: Authorize npm
        script: echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
      # FYI github also needs to be authorized for yarn release, but that's just done with $GITHUB_TOKEN env var
      - name: Release
        # Defaults to `patch` type release. To override, set $RELEASE_INCREMENT_OVERRIDE (e.g. "minor" "major" etc)
        # and $RELEASE_OVERRIDE_VERSION (to current version) in codemagic env vars
        script: |
          if [ $RELEASE_INCREMENT_OVERRIDE ]
          then
            if [ `cat package.json | jq -r '.version'` != $RELEASE_OVERRIDE_VERSION ]
            then
              echo Override version $RELEASE_OVERRIDE_VERSION does not match current version `cat package.json | jq -r '.version'`
              echo If this is left over from a previous release, just go delete these from the codemagic env vars
              exit 1
            else
              yarn release $RELEASE_INCREMENT_OVERRIDE --ci
            fi
          else
            yarn release patch --ci
          fi
    publishing:
      slack:
        channel: '#ci-builds'
